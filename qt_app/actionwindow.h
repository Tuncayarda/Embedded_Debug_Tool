#ifndef ACTIONWINDOW_H
#define ACTIONWINDOW_H

#include <QDialog>
#include <vector>
#include <qradiobutton.h>
#include "action.h"

namespace Ui { class AddActionWindow; }

class AddActionWindow : public QDialog {
    Q_OBJECT
public:
    /**
     * @brief Construct the dialog. Parent may be nullptr for top-level.
     */
    explicit AddActionWindow(QWidget *parent = nullptr);

    /**
     * @brief Destructor; deletes UI scaffolding and transient state.
     */
    ~AddActionWindow();

    /**
     * @brief Returns the transient, currently composed Action (non-owning).
     *        Useful for immediate inspection; do not store this pointer.
     */
    Action* createdAction() const { return m_action; }

    /**
     * @brief Returns the current list of dependency IDs (parents).
     */
    std::vector<int> dependencies() const { return m_deps; }

    /**
     * @brief Enable/disable edit mode.
     *        In edit mode, certain fields (e.g., kind) can be locked or
     *        pre-populated; behavior depends on UI implementation.
     */
    void setEditMode(bool on);

    /**
     * @brief Populate the UI from an existing Action and its parents.
     * @param a        Source action (not owned).
     * @param parents  IDs of parent actions to prefill dependencies.
     */
    void fillFromAction(const Action* a, const std::vector<int>& parents);

    /**
     * @brief Materialize the current UI state as a new owning Action instance.
     *        The returned pointer transfers ownership to the caller.
     *        Returns nullptr if the state is invalid.
     */
    std::unique_ptr<Action> makeAction() const;

    /**
     * @brief Return dependencies parsed from the UI inputs.
     *        Equivalent to `dependencies()` for most flows.
     */
    std::vector<int> deps() const;

private slots:
    /**
     * @brief Confirm/accept: validate inputs, build `m_action`, store deps,
     *        and call `accept()` on success.
     */
    void on_addButton_clicked();

    /**
     * @brief Cancel/close the dialog without applying changes.
     */
    void on_cancelButton_clicked();

    /**
     * @brief Respond to action kind combobox change and switch stacked UI page.
     * @param idx Index of the selected kind in the combobox.
     */
    void on_actionBox_currentIndexChanged(int idx);

private:
    /* UI form generated by Qt Designer (uic). */
    Ui::AddActionWindow *ui{nullptr};

    /* Transient action model backing the UI; not owned by caller. */
    Action* m_action{nullptr};

    /* Dependency IDs captured from the UI (parents). */
    std::vector<int> m_deps;

    /*------------------------------ Helpers --------------------------------*/

    /**
     * @brief Convert a single "High" radio-button state to Level.
     *        If `highChecked` is false, returns LOW; does not produce UNDEFINED.
     */
    static Level hL(bool highChecked);

    /**
     * @brief Parse a CSV string of integer IDs into a vector<int>.
     *        Whitespace is ignored; invalid tokens are skipped.
     */
    static std::vector<int> parseIds(const QString& s);

    /**
     * @brief Switch the stacked widget/page according to action Kind and
     *        enable/disable relevant controls.
     */
    void setKindPage(Kind k);

    /**
     * @brief Read the currently selected action Kind from the UI.
     */
    Kind currentKind() const;

    /**
     * @brief Convert two radio buttons (High/Low) to a Level value.
     *        If neither is selected, returns Level::UNDEFINED.
     */
    static Level levelGet(QRadioButton* h, QRadioButton* l);

    /**
     * @brief Set two radio buttons (High/Low) from a Level value.
     *        UNDEFINED clears both selections.
     */
    static void  levelSet(Level v, QRadioButton* h, QRadioButton* l);

    /**
     * @brief Read dependencies text box as raw CSV (no parsing).
     */
    QString depsCsv() const;

    /**
     * @brief Write dependencies text box with a CSV string.
     */
    void    depsSetCsv(const QString& s);

    /**
     * @brief Convert CSV→IDs and IDs→CSV; tolerant of spaces and empty tokens.
     */
    static std::vector<int> csvToIds(const QString& s);
    static QString idsToCsv(const std::vector<int>& v);

    /**
     * @brief Parse a time string "ms[.us]" or "ms:us" into ms/us fields.
     *        Examples: "10" => 10ms, "10.250" => 10ms 250us, "10:250" => idem.
     *        Invalid formats produce zeros.
     */
    static void parseTime(const QString& text, uint32_t &ms, uint32_t &us);
};

#endif // ACTIONWINDOW_H
